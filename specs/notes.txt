Der Inter-Team-Kommunikations-Apparat oder auch:
Ideen und andere Geisteskrankheiten



Unwichtiges zu Aufgabe C:

- 3 / 4 Komponenten mit Interfaces (z.B. Data Provider o. Usermanager )
- sieht Taschenrechner Aufgabe A, dort gibt es auch module mit Interfaces (Na Paul, Aufgabe A?)
- Interface = abstrakte Klasse in der Header (z.B. Controllerinterface beim Taschenrechner), Methoden müssen mit '= 0' deklariert werden
- Besitzer der Klassen sorgen für Implementierung der hinter den Interfaces
- Interfaces sollten am Namen erkennbar sein (z.B. _inft also Postfix im Klassennamen)
- Alles gut kommentieren!!! (sagt auch der Kempfer! Macht trotzdem niemand) (/** erstellt Funktionsheader-Kommentar)
- main_controller ruft Komponenten in der richtigen Reigenfolge auf (weil Konstruktoren Kacke sind)
- Konstruktor = keine Logik! Nur Attribute initialisieren!



___________________________________________________________________
Datenbank:

- Tasks werden einteln in die Datenbank gespeichert
- Tasks werden beim Anlegen in die DB gespeichert
- Tasks bekommen eine ID
- Tasks werden beim einlesen in die Timeline geladen / gepointed
- LUT für freie IDs
- XML???

- Interface:    save_one_task()
                get_LUT()
                set_ID()
                load_all()


___________________________________________________________________
Task:

- ID
- Titel
- Notizen / Beschreibung
- Startzeit (Datum, Uhrzeit)
- Dauer (15-Minuten-Schritte)
- Wiederholung (enum)
- Priorität (1-5, enum??)
- Deadline (Datum, Uhrzeit)
- Kategorie (Themenbezogen)






Notes 070619

TaskID entspricht der Stelle im Array! Wichtig für Zugriff
Einträge in der LookUpTable entstehen nur beim Löschen(Bsp. DeleteTask())

Task:
    Title
    ID
    ...
    
Timeline:
    Datum
    TaskIDs[]
    
LookUpTable:
    freieIDs[]
   
----------------------
Wiederholungen:
-nur die nächsten xy Wiederholungen speichern - 50?
-Bereiniger für Tasks einrichten, nach 3 Wochen z.Bsp

beim Laden der Tasks wird ein Array/Vektor erstellt
Database gibt Zeiger darauf an Model --> Daten werden direkt verändert, muss nicht über das Interface gemacht werden

saveTask(): bekommt ein Struct mit Task ohne ID --> weist Task ID zu, Return-Wert ist diese ID, Task wird gespeichert
updateTask(): Anstoß vom Manager die Änderungen zu speichern
wenn ein Task sich verändert müssen sich auch die Timelines verändern(Datum)
